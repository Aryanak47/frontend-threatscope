'use client';\n\nimport { useEffect, useState } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport { useMonitoringStore } from '@/stores/monitoring';\nimport { useNotificationStore } from '@/stores/notifications';\nimport { \n  Activity, \n  Zap, \n  Shield, \n  Clock, \n  TrendingUp,\n  AlertTriangle,\n  CheckCircle,\n  Wifi,\n  WifiOff\n} from 'lucide-react';\n\nexport function RealTimeMonitoringWidget() {\n  const { items } = useMonitoringStore();\n  const { isConnected, notifications } = useNotificationStore();\n  const [lastActivity, setLastActivity] = useState<Date>(new Date());\n  \n  // Calculate real-time monitoring stats\n  const realTimeItems = items.filter(item => item.frequency === 'REAL_TIME' && item.isActive);\n  const totalActiveItems = items.filter(item => item.isActive).length;\n  const recentAlerts = notifications.filter(n => \n    n.type === 'breach' || n.type === 'alert'\n  ).slice(0, 3);\n  \n  // Simulate last activity update\n  useEffect(() => {\n    const interval = setInterval(() => {\n      if (realTimeItems.length > 0 && isConnected) {\n        setLastActivity(new Date());\n      }\n    }, 15000); // Update every 15 seconds\n    \n    return () => clearInterval(interval);\n  }, [realTimeItems.length, isConnected]);\n  \n  const getStatusColor = () => {\n    if (!isConnected) return 'text-red-600 bg-red-100';\n    if (realTimeItems.length === 0) return 'text-gray-600 bg-gray-100';\n    return 'text-green-600 bg-green-100';\n  };\n  \n  const getStatusText = () => {\n    if (!isConnected) return 'Disconnected';\n    if (realTimeItems.length === 0) return 'No Real-time Monitors';\n    return 'Active';\n  };\n  \n  const formatTimeAgo = (date: Date) => {\n    const seconds = Math.floor((new Date().getTime() - date.getTime()) / 1000);\n    if (seconds < 60) return `${seconds}s ago`;\n    const minutes = Math.floor(seconds / 60);\n    if (minutes < 60) return `${minutes}m ago`;\n    const hours = Math.floor(minutes / 60);\n    return `${hours}h ago`;\n  };\n  \n  return (\n    <Card className=\"w-full\">\n      <CardHeader className=\"pb-3\">\n        <div className=\"flex items-center justify-between\">\n          <CardTitle className=\"text-lg flex items-center gap-2\">\n            <Zap className=\"h-5 w-5 text-blue-600\" />\n            Real-time Monitoring\n          </CardTitle>\n          <div className=\"flex items-center gap-2\">\n            {isConnected ? (\n              <Wifi className=\"h-4 w-4 text-green-500\" />\n            ) : (\n              <WifiOff className=\"h-4 w-4 text-red-500\" />\n            )}\n            <Badge className={getStatusColor()}>\n              {getStatusText()}\n            </Badge>\n          </div>\n        </div>\n      </CardHeader>\n      \n      <CardContent className=\"space-y-4\">\n        {/* Stats Grid */}\n        <div className=\"grid grid-cols-2 gap-4\">\n          <div className=\"text-center p-3 bg-blue-50 rounded-lg\">\n            <div className=\"text-2xl font-bold text-blue-600\">\n              {realTimeItems.length}\n            </div>\n            <div className=\"text-sm text-blue-700\">Real-time Monitors</div>\n          </div>\n          \n          <div className=\"text-center p-3 bg-green-50 rounded-lg\">\n            <div className=\"text-2xl font-bold text-green-600\">\n              {totalActiveItems}\n            </div>\n            <div className=\"text-sm text-green-700\">Total Active</div>\n          </div>\n        </div>\n        \n        {/* Connection Status */}\n        <div className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\">\n          <div className=\"flex items-center gap-2\">\n            <Activity className=\"h-4 w-4 text-blue-600\" />\n            <span className=\"text-sm font-medium\">Connection Status</span>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            {isConnected ? (\n              <>\n                <CheckCircle className=\"h-4 w-4 text-green-500\" />\n                <span className=\"text-sm text-green-600\">Connected</span>\n              </>\n            ) : (\n              <>\n                <AlertTriangle className=\"h-4 w-4 text-red-500\" />\n                <span className=\"text-sm text-red-600\">Disconnected</span>\n              </>\n            )}\n          </div>\n        </div>\n        \n        {/* Last Activity */}\n        {realTimeItems.length > 0 && isConnected && (\n          <div className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\">\n            <div className=\"flex items-center gap-2\">\n              <Clock className=\"h-4 w-4 text-gray-600\" />\n              <span className=\"text-sm font-medium\">Last Check</span>\n            </div>\n            <span className=\"text-sm text-gray-600\">\n              {formatTimeAgo(lastActivity)}\n            </span>\n          </div>\n        )}\n        \n        {/* Recent Alerts */}\n        {recentAlerts.length > 0 && (\n          <div className=\"space-y-2\">\n            <div className=\"flex items-center gap-2 mb-2\">\n              <TrendingUp className=\"h-4 w-4 text-orange-600\" />\n              <span className=\"text-sm font-medium\">Recent Alerts</span>\n            </div>\n            \n            {recentAlerts.map((alert) => (\n              <div key={alert.id} className=\"flex items-center gap-2 p-2 bg-orange-50 rounded text-sm\">\n                <div className={`h-2 w-2 rounded-full ${\n                  alert.priority === 'critical' ? 'bg-red-500' :\n                  alert.priority === 'high' ? 'bg-orange-500' :\n                  'bg-yellow-500'\n                }`} />\n                <span className=\"flex-1 truncate\">{alert.title}</span>\n                <span className=\"text-xs text-gray-500\">\n                  {formatTimeAgo(alert.timestamp)}\n                </span>\n              </div>\n            ))}\n          </div>\n        )}\n        \n        {/* No Real-time Monitors Message */}\n        {realTimeItems.length === 0 && (\n          <div className=\"text-center p-4 bg-amber-50 border border-amber-200 rounded-lg\">\n            <Zap className=\"h-8 w-8 mx-auto mb-2 text-amber-600\" />\n            <p className=\"text-sm font-medium text-amber-800 mb-1\">\n              No Real-time Monitors Active\n            </p>\n            <p className=\"text-xs text-amber-700\">\n              Add real-time monitoring for instant threat detection\n            </p>\n          </div>\n        )}\n        \n        {/* Performance Metrics */}\n        {realTimeItems.length > 0 && (\n          <div className=\"pt-3 border-t border-gray-200\">\n            <div className=\"text-xs text-gray-500 space-y-1\">\n              <div className=\"flex justify-between\">\n                <span>Response Time:</span>\n                <span className=\"text-green-600 font-medium\">&lt;500ms</span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span>Uptime:</span>\n                <span className=\"text-green-600 font-medium\">99.9%</span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span>Coverage:</span>\n                <span className=\"text-blue-600 font-medium\">Global</span>\n              </div>\n            </div>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n